import { GridItemBox } from "@/components/gridItem"
import { SectionLayout } from "@/components/layouts"
import { Title } from "@/components/title"

import { commonPaddingWrapper } from "@/styles/theme.css"

export const ProjectSection = () => {
	return (
		<SectionLayout id="project" className={commonPaddingWrapper}>
			<Title label="project" color="primary" hasUnderLine />
			<div
				style={{
					display: "flex",
					flexDirection: "column",
					gap: "3rem",
				}}
			>
				<GridItemBox
					backGround="white"
					keyLabel="엑스포럼"
					data={[
						{
							first: {
								title: "Server Driven UI",
								date: { startDate: "2023.11", endDate: null },
							},
							second: {
								itemType: "label",
								items: {
									"tech stack": ["Next.JS", "React query", "Turbo Repo"],
								},
							},
							third: {
								items: [
									"Turbo Repo를 활용하여 공통 컴포넌트를 효율적으로 관리하며, 모노레포 환경에서 UI 컴포넌트의 일관성을 유지하고 재사용성을 극대화함. 이를 통해 각 애플리케이션에서 공통 컴포넌트를 손쉽게 가져와 사용할 수 있도록 패키지화하고, 버전 관리를 자동화하여 개발 생산성을 향상시킴. 또한, 변경 사항이 여러 프로젝트에 빠르게 반영될 수 있도록 구조를 최적화하여 유지보수의 효율성을 높임.",
									"SDUI 디자인 시스템을 설계 및 구현하여 Server Driven UI 방식에 적합한 동적 UI 구조를 정의하고, JSON 기반의 데이터 모델링을 통해 아키텍처를 구축함. 디자인 시스템을 기반으로 UI 요소를 유연하게 조합할 수 있도록 설계하여, 서버에서 전달하는 데이터에 따라 동적으로 UI가 변경되는 구조를 구현함. 이를 통해 다양한 화면 구성을 손쉽게 조정할 수 있으며, 반복되는 수정사항을 코드 변경 없이도 UI 업데이트가 가능하도록 설계함.",
									"데이터베이스 설계를 통해 SDUI 컴포넌트를 체계적으로 관리 및 생성하며, UI 렌더링을 위한 데이터 모델을 정의하고 API와 유기적으로 연동되는 스키마를 설계함. 컴포넌트별 속성과 상태를 효과적으로 관리할 수 있도록 데이터베이스 구조를 체계화하여, UI 요소의 동적 생성과 변경이 가능하도록 함. 이를 통해 서버에서 데이터를 수정하는 것만으로도 UI 구성을 변경할 수 있는 환경을 마련하고, 다양한 사용자 요구 사항에 유연하게 대응할 수 있도록 함.",
								],
							},
						},

						{
							first: {
								title: "전시회 웹사이트",
								date: { startDate: "2024.02", endDate: "2024.05" },
							},
							second: {
								itemType: "label",
								items: {
									"tech stack": [
										"Next.JS",
										"SWR",
										"zustand",
										"tailwind",
										"SCSS",
									],
								},
							},
							third: {
								items: [
									"SSR과 ISR을 통한 데이터 캐싱 관리 및 최적화: 서버 사이드 렌더링(SSR)과 점진적 정적 재생성(ISR)을 활용하여, 데이터의 빠른 로딩을 보장하고 최신 데이터를 효율적으로 캐싱하여 사용자 경험을 개선. 이를 통해 동적 콘텐츠를 안정적으로 처리하며 SEO 성능을 극대화함.",
									"SEO 최적화: SEO 최적화를 통해 검색 엔진에서 웹사이트의 가시성을 높이고, 사용자가 원하는 정보를 쉽게 찾을 수 있도록 구조화된 데이터를 제공. 페이지의 메타데이터, 키워드 및 콘텐츠 최적화를 통해 검색 순위를 향상시키고, 더 많은 유입을 유도함.",
									"웹사이트 최적화: 웹사이트의 Lighthouse 퍼포먼스 점수를 약 40점에서 99점으로 약 2.47배 향상시켜, 페이지 로딩 속도와 사용자 경험을 개선. 이미지 최적화, 리소스 압축 및 코드 스플리팅 등을 통해 전반적인 성능을 최적화하며, 웹사이트의 반응 속도와 안정성을 증가시킴.",
									"Git Submodule을 활용한 코드 관리: 전시회 웹사이트와 어드민 대시보드 간에 공통 컴포넌트를 Git Submodule을 통해 효과적으로 관리하여, 두 프로젝트 간 코드 일관성을 유지하고 유지보수의 복잡성을 줄임. 이를 통해 각 프로젝트에서 필요한 변경 사항을 한 곳에서 관리하고, 변경 사항을 다른 프로젝트에 손쉽게 반영할 수 있도록 함.",
									"포트원 연동을 통한 결제 프로세스 구축 및 운영: 외국인 사용자를 위한 결제 프로세스를 포트원 시스템과 연동하여 구현하고, 다양한 결제 방법을 지원하여 결제 과정의 편리함과 안정성을 제공. 이를 통해 해외 사용자들이 쉽고 안전하게 결제를 진행할 수 있도록 하여, 글로벌 시장에 맞는 서비스를 제공함.",
									"어드민 대시보드 개발: 전시회 관리자가 전시 내용을 쉽게 업데이트하고 관리할 수 있도록 직관적인 어드민 대시보드를 설계 및 구현. 사용자는 대시보드를 통해 전시 내용, 일정, 참가자 정보를 효율적으로 관리하고, 실시간으로 변경 사항을 반영할 수 있음.",
									"데이터 관리 시스템 구축: 참가자 등록 정보와 티켓 환불(취소) 관리를 위한 기능을 추가하여 관리 효율성을 증대시킴. 이를 통해 관리자가 실시간으로 참가자 상태를 모니터링하고, 환불/취소 요청을 빠르게 처리할 수 있게 되어 운영 효율성이 크게 향상됨.",
									"사용자 친화적인 인터페이스 및 반응형 디자인: 다양한 디바이스에서 최적화된 사용자 경험을 제공하기 위해 반응형 디자인을 구현. 모바일, 태블릿, 데스크탑 등 모든 화면 크기에서 일관된 디자인을 유지하여, 모든 사용자가 편리하게 웹사이트를 이용할 수 있도록 함.",
								],
							},
						},
						{
							first: {
								title: "사내 명함 스캔 어플",
								date: { startDate: "2024.01", endDate: "2024.02" },
							},
							second: {
								itemType: "label",
								items: {
									"tech stack": [
										"Flutter",
										"TensorFlow",
										"React",
										"nest.js",
										"tailwind",
									],
								},
							},
							third: {
								items: [
									"실시간 명함 스캔 기능 개발: Flutter를 이용하여 사용자가 명함을 실시간으로 스캔할 수 있는 기능을 구현. Flutter의 카메라 플러그인과 실시간 이미지 처리 기술을 활용하여 명함을 빠르게 인식하고, 필요한 정보를 추출해 사용자에게 즉시 보여줄 수 있도록 했습니다",
									"TensorFlow를 이용한 OCR(광학 문자 인식) 기능 적용: 명함에서 텍스트를 정확하게 인식하기 위해 TensorFlow 모델을 활용하여 OCR을 적용. 이를 통해 다양한 명함 디자인에도 안정적으로 텍스트를 추출하고, 사용자에게 명확한 데이터를 제공합니다.",
									"백엔드와의 데이터 통신 구현: 명함 스캔 후 인식된 정보를 백엔드 서버에 저장하고, 사용자 정보와 실시간으로 데이터를 주고받을 수 있는 통신 시스템을 구현. 이를 통해 명함 정보가 즉시 저장되고, 다른 기기에서 사용할 수 있도록 데이터 동기화 및 관리가 용이하게 되었으며, 실시간으로 사용자에게 피드백을 제공할 수 있습니다.",
									"React를 이용한 웹 애플리케이션 통합: 백엔드와의 통신을 통해 명함 데이터를 React 기반 웹 애플리케이션에서 실시간으로 조회하고 관리할 수 있는 인터페이스를 개발. 이를 통해 사용자에게 명확한 데이터 시각화와 관리 편의성을 제공하며, 다양한 기기에서 데이터를 접근할 수 있도록 지원합니다.",
								],
							},
						},
						{
							first: {
								title: "TOPIC(B2C 사이트)",
								date: { startDate: "2023.11", endDate: "2024.01" },
							},
							second: {
								itemType: "label",
								items: {
									"tech stack": ["Next.JS", "HBS"],
								},
							},
							third: {
								items: [
									"프로젝트 유지보수 및 기능 개선: 기존 프로젝트의 유지보수를 통해 버그 수정, 성능 최적화, 새로운 기능 추가 등을 진행하며, 코드의 일관성을 유지하고 사용자 경험을 지속적으로 개선합니다. 이 과정에서 Next.js의 파일 기반 라우팅 및 API 라우팅 기능을 활용해 새로운 기능을 효율적으로 추가하고, 서버 측과 클라이언트 측 모두에서 최적화된 성능을 유지합니",
									"REST API를 통해 수신한 데이터 표시 기능 구현: 외부 API로부터 데이터를 수신하여 웹 페이지에 표시하는 기능을 구현. Next.js의 getServerSideProps 또는 getStaticProps를 사용하여 서버에서 데이터를 미리 가져오고 렌더링하여 빠른 로딩을 보장하며, 클라이언트 측에서는 React Query 또는 Axios를 통해 동적인 데이터 업데이트 및 관리 기능을 추가합니다.",
									"Chart.js를 활용한 데이터 시각화: 어드민 페이지에서 수집된 데이터를 직관적으로 분석할 수 있도록 Chart.js 라이브러리를 사용하여 다양한 차트(막대, 선, 원형 등) 형태로 데이터를 시각화. 이를 통해 관리자는 데이터를 쉽게 파악하고, 중요한 지표를 빠르게 확인할 수 있게 됩니다",
								],
							},
						},
					]}
				/>

				<GridItemBox
					backGround="white"
					keyLabel="막시마"
					data={[
						{
							first: {
								title: "타로 키오스트 앱/어드민 제작",
								date: { startDate: "2023.8", endDate: "2023.10" },
							},
							second: {
								itemType: "label",
								items: {
									"tech stack": ["Next.JS", "TypeScript", "Electron.JS"],
								},
							},
							third: {
								items: [
									"어드민 웹 페이지에서 가맹점 생성 기능 구현: Next.js와 Firebase를 사용하여 어드민 대시보드에서 가맹점 정보를 쉽게 추가하고 관리할 수 있는 기능을 구현했습니다. 사용자는 가맹점 등록 폼을 통해 필요한 정보를 입력하고, 이를 Firebase 데이터베이스에 실시간으로 저장할 수 있게 되었습니다.",
									"가맹점 정보 입력 폼 개발: TypeScript를 활용하여 정적 타입을 적용한 가맹점 정보 입력 폼을 개발, 폼 유효성 검사 및 오류 처리를 강화하여 사용자 경험을 개선하고, 데이터의 정확성을 보장했습니다.",
									"QR 코드 생성 기능 구현: 키오스크 결과를 사용자에게 QR 코드 형식으로 제공하기 위해, Firebase에서 가맹점 결과 데이터를 수신하고 QR 코드를 동적으로 생성하는 기능을 구현했습니다. 이로 인해 사용자는 손쉽게 결과를 모바일 기기에서 스캔하여 확인할 수 있었습니다.",
									"Firebase를 활용한 통합 관리: Firebase의 실시간 데이터베이스와 인증 기능을 활용하여 가맹점 정보와 사용자 데이터를 중앙에서 통합적으로 관리하고, 빠르고 안정적인 데이터 동기화 및 사용자 인증을 구현했습니다.",
									"랜딩 페이지 제작: Next.js를 사용하여 랜딩 페이지를 개발하고, SEO 최적화 및 빠른 페이지 로딩을 구현하여 사용자 경험을 향상시켰습니다.",
									"타로 키오스크의 데스크톱 애플리케이션 개발 (Electron.js): Electron.js를 사용하여 타로 키오스크의 데스크톱 애플리케이션을 개발했습니다. 이를 통해 키오스크가 Windows와 macOS 환경에서 원활하게 작동할 수 있도록 구현했으며, 크로스 플랫폼 환경에서 데스크톱 애플리케이션의 성능과 호환성을 보장했습니다.",
								],
							},
						},
					]}
				/>

				<GridItemBox
					backGround="white"
					keyLabel="바나나코퍼레이션"
					data={[
						{
							first: {
								title: "cafe24 연동 상품 공유, 구입 시 적립",
								date: { startDate: "2022.11", endDate: "2023.02" },
							},
							second: {
								itemType: "label",
								items: {
									"tech stack": [
										"ReactNative",
										"Node.JS",
										"TypeScript",
										"Nest.JS",
									],
								},
							},
							third: {
								items: [
									"상품 공유 및 구입 시 적립 기능 구현 (Cafe24 연동): React Native와 Node.js를 활용하여 Cafe24 플랫폼과 연동된 상품 공유 및 구입 시 적립 기능을 구현했습니다. 이를 통해 사용자가 상품을 공유하거나 구입할 때 자동으로 적립되는 시스템을 개발하여, 사용자가 더욱 적극적으로 참여할 수 있도록 했습니다.",
									"다양한 환경에서 재사용 가능한 공유 컴포넌트 개발: React Native와 TypeScript를 사용하여, 다양한 플랫폼에서 재사용 가능한 공유 컴포넌트를 개발했습니다. 이를 통해 코드의 중복을 줄이고, 유지보수를 용이하게 만들며, 여러 프로젝트에서 동일한 기능을 손쉽게 활용할 수 있도록 했습니다.",
									"어드민 설정 기능 구현: Nest.js를 사용하여 어드민 대시보드에서 상품 관리와 사용자 적립 상태를 효율적으로 설정하고 관리할 수 있는 기능을 구현했습니다. 이 기능을 통해 관리자는 상품의 공유 및 구매와 관련된 정책을 쉽게 설정하고, 적립 기능을 원활하게 운영할 수 있도록 했습니다.",
									"Firebase를 활용한 통합 관리: Firebase의 실시간 데이터베이스와 인증 기능을 활용하여 가맹점 정보와 사용자 데이터를 중앙에서 통합적으로 관리하고, 빠르고 안정적인 데이터 동기화 및 사용자 인증을 구현했습니다.",
									"Node.js와 Nest.js로 API 서버 구현: Node.js와 Nest.js를 활용해 효율적인 백엔드 API 서버를 구축하고, Cafe24와의 데이터 연동을 통해 실시간 상품 정보 및 적립 내역을 관리하고 동기화할 수 있는 시스템을 개발했습니다.",
								],
							},
						},
						{
							first: {
								title: "Node Shop",
								date: { startDate: "2022.07", endDate: "2022.10" },
							},
							second: {
								itemType: "label",
								items: {
									"tech stack": [
										"ReactNative",
										"Node.JS",
										"TypeScript",
										"Nest.JS",
									],
								},
							},
							third: {
								items: [
									"전체 앱 기능 및 퍼블리싱 구현: React Native와 Nest.js를 사용하여 모바일 애플리케이션의 전반적인 기능을 구현하고, 퍼블리싱을 완료했습니다. 사용자 인터페이스(UI)를 모바일 환경에 최적화하고, 필요한 모든 기능을 효율적으로 구현하여 앱의 성능과 사용자 경험을 향상시켰습니다.",
									"재사용 가능한 공유 컴포넌트 제작: React Native와 TypeScript를 이용해 다양한 환경에서 재사용 가능한 컴포넌트를 개발했습니다. 이를 통해 다른 기능 및 프로젝트에서 공통으로 사용할 수 있는 구성 요소를 만들었으며, 코드의 유지보수성과 효율성을 높였습니다.",
									"웹 크롤링 기술을 통한 데이터 수집: Python 기반의 웹 크롤러를 구현하여 필요한 데이터를 웹에서 자동으로 수집하고, 이를 앱 내에서 유용하게 활용할 수 있도록 했습니다. 이를 통해 외부 웹사이트에서 정보를 실시간으로 가져와, 앱의 데이터를 최신 상태로 유지할 수 있었습니다.",
								],
							},
						},
					]}
				/>
			</div>
		</SectionLayout>
	)
}
